#summary Mvp4g & Browser History (Draft for Mvp4g 1.2.0)

<wiki:toc max_depth="3" />

=Place Service=

==Description==

Mvp4g instantiates a Place Service to easily manage history based on History converter.

History converters have two goals: 
 * convert event parameters to a string (to add it to the token) and/or store them (in cookie for example) when an event is stored in browser history. In order to do this convertion, the history converter must implement the handling method of the event except that it must return a string. This string will then be stored in the token ([http://code.google.com/p/mvp4g/wiki/PlaceService#Associate_an_History_Converter_to_an_event see Associate an History Converter to an event]).
 * convert, when history changes, a token to an event, retrieve information to build its parameters (thanks to the token, database, cookie...) and then fires the converted event to event bus. This conversion is done by convertFromToken method.

This is how Mvp4g stores an event to the browser history:

[http://mvp4g.googlecode.com/svn/tags/mvp4g-1.2.0/documentation/uml/place_service.png]

This is how Mvp4g retrieves an event from browser history:

[http://mvp4g.googlecode.com/svn/tags/mvp4g-1.2.0/documentation/uml/place_service_reverse.png]

The token stored in the browser history will be built the following way: event type + "?" + value returned by the handling method of the event.

Any event can be stored in history. All you have to do is to associate an history converter to an event.

If you need to store event information when the event is stored in the browser history, you can do this with the event handling method of the history converter.<br/> 
If you need to retrieve event information when browser history changes, you can do this in the convertFromToken method of the history converter.

==Create an History Converter==

To create an history converter, you have to:
 * create a class that implements HistoryConverter 
 * have a constructor with no parameter or compatible with GIN  (ie annotated with @Inject, see see GIN website for more information).
 * annotate your class with @History
 * have your history converter implement the handling method of the event

{{{
@History
public class CompanyHistoryConverter implements HistoryConverter<CompanyBean, CompanyEventBus> {...}
}}}

You can also give a name to your converter thanks to the attribute "name" of @History annotation (it may be used, but not recommended, to associate a history converter to an event, [http://code.google.com/p/mvp4g/wiki/PlaceService#Associate_an_history_converter_to_an_event see next paragraph] ).

The @History annotation has also an attribute convertParams. If this param is set to false, then you don't have to define the handling method of the associated event. In this case, Mvp4g will automaticaly stores an empty string ("") for the parameters of this event.

==Associate an History Converter to an event==
To add an history converter to an event, you need to specify the history converter attribute of the @Event annotation that annotates the method of your event.

{{{
@Event(..., historyConverter = CompanyHistoryConverter.class)
public void goToCompany(long id);
}}}

By defining the history converter class, Mvp4g will be able to find the instance of history converter with this class and associate it with the event.<br/>
Mvp4g generates instances of history converter as singleton so for one class, it generates only one instance, which means that if for several events, the same history converter class is associated, then the events will share the same instance of the converter.

Instead of the class, you can also specify the name of the history converter thanks of the attribute historyConverterName of @Event annotation. In this case, you need to make sure that an history converter with this name exits.

When an history converter is associated to an event, it needs to implement the handling method of this event except that the return type must be a String.
For the above event, CompanyHistoryConverter needs to implement:
{{{
public String goToCompany(long id);
}}}

NB: CompanyHistoryConverter doesn't need to implement this method in case the convertParams attribute of the @History that annotates the class is set to false.

By default, Mvp4g stores the name of the event's method. You can change this name by setting the attribute historyName of the @Event that annotates your event method.

{{{
@Event(..., historyConverter = CompanyHistoryConverter.class, historyName="company")
public void goToCompany(long id);
}}}

==Inject services to history converters==

You may need to call the server while converting your event to/from a token, that's why Mvp4g allows you to easily inject services inside history converters.

You can inject services the same way as for presenters ([http://code.google.com/p/mvp4g/wiki/PresenterViewService#Injecting_services see this section for more information]).

==Init and NotFound events==

When dealing with history, two particular cases can happen:
 * token stored in history is null or empty (ie equals to ""). 
 * token is incorrect (for example, user tried to modify the url and event type stored in the token is not correct).

For both of these cases, Mvp4g lets you define events that can be fired if these cases happen. You can annotate the method defining an event in your event bus with:
 * @InitHistory, to manage the case when the token is empty
 * @NotFoundHistory, to manage the case when the token is incorrect.

{{{
@InitHistory
@Event(handlers={RootTemplatePresenter.class, TopBarPresenter.class})
public void init();
	
@NotFoundHistory
@Event(handlers=RootTemplatePresenter.class)
public void notFound();
}}}

@InitHistory must be set if you have events with history converters. 
@NotFoundHistory is always optional. If you have events with history converters and you haven't set the @NotFoundHistory, then the event annotated with @InitHistory will fired in case the token is incorrect.

No object can be fired with event(s) annotated with @InitHistory or @NotFoundHistory.

==Clear History Token==

For some event, you may want to delete history token stored in the URL. In order to do so, you just have to associate your event to a particular HistoryConverter provided by the framework, ClearHistory.

{{{
@Event(handlers = MainPresenter.class, historyConverter=ClearHistory.class)
public void clearHistory();
}}}

==History on start==
When you start your application, you may want to fire the current history state in order to take care of any token that could be stored in the URL.<br/>
In order to do so, you have to set the attribute historyOnStart of the @Events annotation of your event bus to true. By default this parameter is false.

{{{
@Events(...historyOnStart = true)
public interface MainEventBus extends EventBusWithLookup {...}
}}}

==Temporary disable history==

In some cases, you may need to temporary stop storing events in browser history. In order to do so, Mvp4g provides two methods using the event bus, setHistoryStored and setHistoryStoredForNextOne. The first method allows you to enable/disable storage of all events associated with an history converter in browser history. The second one allows you enable/disable storage of the next fired event (other events fired while handling this event won't be affected by the call of this method).

In this example, none of the events fired will be stored in browser history:
{{{
	eventBus.setHistoryStored(false);
	eventBus.selectCompanyMenu();
}}}

In this example, only the selectCompanyMenu event won't be stored in browser history:
{{{
	eventBus.setHistoryStoredForNextOne(false);
	eventBus.selectCompanyMenu();
}}}

In this example, selectCompany event and all the events fired by handlers of selectCompany event won't be stored in browser history:
{{{
	eventBus.setHistoryStored(false);
	eventBus.selectCompanyMenu();
	eventBus.setHistoryStored(true);
}}}

==Crawlable Event==
When you store you event in the browser history, you may want the event url to be crawlable by search engine. To have crawlable url, you need to add a "!" before the token ([http://code.google.com/web/ajaxcrawling/ see Making AJAX Applications Crawlable for more information):
www.mysite.com/#!displayCompany?id=1234.

You can ask the history converter to add this "!" by having the isCrawable method returns true:
{{{
public class OneCrawlableHistoryConverter implements HistoryConverter<MainEventBus> {

	public boolean isCrawlable() {
		return true;
	}

}
}}}

Mvp4g takes care of making the url crawlable but you will still have to configure your server to handle pages requested by the crawler ([http://code.google.com/web/ajaxcrawling/docs/getting-started.html see part 2]).

Mvp4g will react the same way to crawlable and not crawable urls. It means that the 2 following urls will produce the same result:
www.mysite.com/#!displayCompany?id=1234.
www.mysite.com/#displayCompany?id=1234.

==History Configuration==
By default, Mvp4g uses a "?" to separate the event name from its parameters. You can change this character thanks to @HistoryConfiguration annotation:
{{{
@HistoryConfiguration(paramSeparator="|")
@Events(...historyOnStart = true)
public interface MainEventBus extends EventBusWithLookup {...}
}}}

@Event annotation has the following attributes:
*paramSeparator: character to use to separate the event name from its parameters.
*paramSeparatorAlwaysAdded: if true, the charater used to separate the event name from its parameters will always be added at the end of the token even if there is no parameter.

[http://www.qondio.com/graphics/attention.png] parameters stored in the token shouldn't contain the character used to separate the event name from its parameters.
[http://www.qondio.com/graphics/attention.png] if you use "/" to separate the event name from its parameters, you need to have the paramSeparatorAlwaysAdded set to true. "/" is also used to separate child module history name (see below) and when parsing the url, 
Mvp4g needs to be sure that the last "/" is used to seperate the event name from its parameters.

=History Management and Multi-Modules feature=

Any module (child or parent module) can store its events into history by associating an history converter to an event. When an event of a module (except for the Root module) needs to be stored in history, the event will be converted the same way as described before except that the name of the module and all its parents (*but the Root Module*) will also be stored in the token.

For example, the following token: #module/submodule/event1 means:
 * event1: name of the event to forward
 * submodule: name of the module to which you can forward the event
 * module: name of the parent module. Since this is the top name, it means that the parent of the parent module is the Root Module.

[http://mvp4g.googlecode.com/svn/tags/mvp4g-1.2.0/documentation/uml/place_service_children.png]

When history token changes, the framework will automatically download if needed the module associated with the event and forwards the event to the module.

For example, if the value of token is: #module/submodule/event1 then:
 * module will be loaded.
 * When done loading module, submodule will be loaded
 * when done loading submodule, event1 is forwarded to submodule.

[http://mvp4g.googlecode.com/svn/tags/mvp4g-1.2.0/documentation/uml/place_service_reverse_children.png]


If your module needs to store events in history, then you need to define its history name. In order to so, you need to annotate your module interface with @HistoryName.

{{{
@HistoryName("company")
public interface CompanyModule extends Mvp4gModule {...}
}}}

This name will be stored in the token (and thus displayed in the url).

Only the Root module knows the place service, which means that you can configure an History init event, a not found event and the flag historyOnStart only inside the Root module. You can't define these parameters in other modules.