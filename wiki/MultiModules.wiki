#summary Draft for 1.1.0 version

=Multi-Modules=

Thanks to Mvp4g, developers can easily split their application into modules. Each module will have its own event bus and own presenters/views/services.

A module will be able to communicate with its parent and its childmodule(s) by forwarding them events. When an event is forwarding to a parent and/or a child:
 * the parent and/or child module(s) must be able to handle this event. If the event has an object associated with it, this object will also be forwarded.
 * the parent and/or child module(s) will handle this event as if it was thrown by one of its own presenters.

An event can be handled by zero to many presenters and/or forwarded to zero to many child modules and/or forwarded to one parent module.

Thanks to Mvp4g and GWT 2.0 new features, RunAsync, you can either load the code of your module at start or only when it needs to handle its first event.

==Creating modules==

 # You need to create an interface that extends Mvp4gModule:
{{{
public interface CompanyModule extends Mvp4gModule {}
}}}
 # You need to define an event bus for the module and links this event bus to your module. You need to specify the attribute module of @Events annotation of your event bus interface. The value of this attribute must be equal to the class of your module.
{{{
@Events(..., module=CompanyModule.class)
public interface CompanyEventBus extends EventBus {...}
}}}

==Root Module==

The root module is the top module of your application. It's the one that is automaticaly created by Mvp4g whenever you create an event bus without specifiying the module attribute of the @Events annotations.

Wherever you use multi-modules feature or not, you need to have a Root Module (ie you need to define an event bus without specifiying the module). This module is the first module loaded by the application and all other modules have amongs their parent(s) the Root Module.

==Event forwarding from parent to child module==

You can define child modules of a module thanks to ChildModule<b>s</b> annotation. This annotations contains a list of ChildModule annotation. Each annotation of this list define a child module. 

A ChildModule annotation has three attributes:
 * moduleClass: class of the child module. It must be one of the class you created at step 1.
 * async (default:true): if set to true, then the code containing the child module is loaded when handling its first event otherwise it is loaded when application starts. In the first case, Mvp4g uses GWT RunAsync feature to load the child module. 
 * autoLoad (default:true): if set to true, the start view of the child module will be displayed when the child module is done loaded. When this option is set to true, the event of the parent module needed to load the start view of the child module must be defined (see ...)

To forward an event to a child module, you need to specify the attribute modulesToLoad of the @Event annotation that is associated with the method of your event (defined inside your event bus interface). This attribute contains an array of child module(s) classname that need(s) to which events need to be forwarded be loaded.

{{{
@Event(modulesToLoad = CompanyModule.class)
public void goToCompany();
}}}

A child module will be started (ie its presenters/views/services will be instantiated and its start event will be fired) only the first time it has to handle an event even if several events are forwarded to it. 

[diagramToDo.png]

===Child module autoload===

By default, autoload option is set to true, which means that when a child module is loaded, parent module will automaticaly display child module start view.

To indicate how parent module should display child module start view, you need to set an event to use. This event will be fired with child module start view each time an event is forwarded to a child module.

To set this event, you have to annotate the event with @UseToLoadChildModuleView.

{{{
@UseToLoadChildModuleView(CompanyModule.class)
@Event(handlers = MainPresenter.class)
public void changeBody(Widget newBody);
}}}

The only attribute of this annotation is a list of child module class name. You can specify one-to-many child module classes thanks to this attribute. You can specify only one event to load a child module start view.

The parent module event used to load child module start view must be associated with one object which type is compatible with child module start view type.

===Before, After, OnError===

When the code of a child module is loaded thanks to GWT 2.0 feature, RunAsync, you have the possibility to define:
 * a before event: this event will be called before starting to load the code of the child module. You can for example decide to display a wait popup.
 * an after event: this event will be called after the code of the module is done loading. You can for example decide to hide a wait popup.
 * an error event: this event will be called in case an error occurs while loading the code of the child module.

You can define the three events thanks to three annotations: @BeforeLoadChildModule, @AfterLoadChildModule, @LoadChildModuleError.<br/>
Event(s) used before and/or after must not be associated with an object.<br/>
Event used in case of error can be associated with one object (not mandatory) but the type of this object must be compatible with java.lang.Throwable.

{{{
@LoadChildModuleError
@Event(handlers = MainPresenter.class)
public void errorOnLoad(Throwable reason);

@BeforeLoadChildModule
@Event(handlers = MainPresenter.class)
public void beforeLoad();

@AfterLoadChildModule
@Event(handlers = MainPresenter.class)
public void afterLoad();
}}}

==Event forwarding from child to parent module==

The first thing you need to do is to define a Parent module setter inside the Child Module interface. This setter must be called setParentModule and have one parameter
which class must be ParentModule class. In case the parent module is the Root Module of your application, then the parent module class will be equal to Mvp4gModule.

{{{
public interface CompanyModule extends Mvp4gModule {
	
	public void setParentModule(Mvp4gModule parentModule);

}
}}}

This setter will be used by Mvp4g to inject the parent module into child module. You do not need to use it in your code.

To forward an event to a child module, you need to set the attribute forwardToParent to "true" thanks to @Event annotation.

{{{
@Event(forwardToParent=true)
public void changeBody(Widget body);
}}}

[diagramToDo.png]