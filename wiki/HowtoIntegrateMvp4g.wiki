#summary How to integrate Mvp4g to your project

== Introduction ==
To integrate Mvp4g to your project, the following steps need to be done
  # Add needed library to your project
  # Modify your GWT configuration file (`*`.gwt.xml)
  # Create your presenters and set your events 
  # Create a Mvp4g configuration file for your project
        

== Library ==

Add the following libraries to your project:
  * Commons Lang ([http://commons.apache.org/downloads/download_lang.cgi Download here])
  * Commons Configuration ([http://commons.apache.org/downloads/download_configuration.cgi Download here])
  * Mvp4g ([http://code.google.com/p/mvp4g/downloads/list Download here])  


== GWT configuration file ==

Insert Mvp4g module to your project:
{{{
<inherits name='com.mvp4g.Mvp4gModule'/>
}}}

Choose as an entry-point the Mvp4g Entry point
{{{
<entry-point class='com.mvp4g.client.Mvp4gEntryPoint'/>
}}}
or
Add the following lines to your entry-point
{{{
Mvp4gStarter starter = GWT.create(Mvp4gStarter.class);
starter.start();
}}}


== Mvp4g Views ==
Create your project Views(s). A view just needs to have a constructor with no parameter.

== Mvp4g Services ==
Create your project Service Interface(s). A service interface must extend the RemoteService included in the GWT library.

== Mvp4g Presenters ==
Create your project presenters(s). A presenter needs to:
  * extend Presenter or implement PresenterInterface
  * have a constructor with no parameter

== Mvp4g configuration file == 
Create in your project source directory a file mvp4g-conf.xml. Your file must start with and end by the tag `<mvp4g>`.
{{{
YourGWTModule
     |--- src
          |--- mvp4g-conf.xml
}}}

===Views===
Add your views to the configuration file. Only views declared in this configuration file can be injected into presenters.
{{{
<views package="com.mvp4g.example.client.view" >
	<view name="viewOne" class="View1" />
	<view name="viewTwo" class="com.mvp4g.example.client.view.special.View2" />
	...
</views>
}}}

 * package: you can precise the package where your views are located in order not to have to give it for each view. If the attribute `class` of the tag `view` contains only the class name, the value of the package attribute will be added to it to generate the view class full name. 
 * name: name of the view. It must be unique amongs views, services and presenters.
 * class: Class of the view. If no package is precised, the package attribute will be added to it to generate the full name of the class.

===Services===
Add your services to the configuration file. Only services declared in this configuration can be injected into presenters.
{{{
<services package="com.mvp4g.example.client" >
	<service name="service1" class="Service1" />
	<service name="service2" class="com.mvp4g.example.client.service.special.Service2" />
	...
</services>
}}}

 * package: you can precise the package where your service interfaces are located in order not to have to give it for each service. If the attribute `class` of the `service` tag contains only the class name, the value of the package attribute will be added to it to generate the service interface full name. 
 * name: name of the service. It must be unique amongs views, services and presenters.
 * class: Interface of the service. If no package is precised, the package attribute will be added to it to generate the full name of the interface.

It is not an instance of the service interface that is injected into the presenter but an instance of the associated Async class.

If a service is injected into a presenter, the presenter must define the appropriate setter. The name of this method must be equals to: "set" + name of the service and the type of the parameter of this method must be equals to: (package if needed) + class of the service (first character being upper case) + "Async". For example, to be able to inject `service1` into a presenter, the presenter needs to define the following method:
{{{
public void setService1(com.mvp4g.example.client.Service1Async service1)
}}}


===Presenters===
Add your presenters to the configuration file. You have to inject one view into each presenter and can inject one to many services into it.
{{{
<presenters package="com.mvp4g.example.client.presenter" >
	<presenter name="presenter1" class="Presenter1" view="viewOne" />
	<presenter name="presenter2" class="com.mvp4g.example.client.presenter.special.Presenter2" view="viewTwo" services="service1, service2" />
	...
</presenters>
}}}

 * package: you can precise the package where your presenters are located in order not to have to give it for each presenter. If the attribute `class` of the `presenter` tag contains only the class name, the value of the package attribute will be added to it to generate the presenter class full name. 
 * name: name of the presenter. It must be unique amongs views, services and presenters.
 * class: Class of the presenter. If no package is precised, the package attribute will be added to it to generate the full name of the class.
 * view: name of the view to inject in the presenter. The name must be equal to one of the views' name declared in the configuration file.
 * service (optional) : name(s) of the service(s) to inject in the presenter. The name(s) of the service(s) must be equal to one of the services' name declared in the configuration file. Each service name must be separated by a coma.

===Events===
Add events that can be sent by presenters in the configuration file.
{{{
<events>
	<event type="event1" methodCalled="onEvent1" eventObjectClass="com.mvp4g.example.client.bean.Bean1" handlers="presenter1,presenter2" />
	...
</events>
}}}

 * type: type of the event. It must be unique amongst events. This is the type given to the event bus to dispatch an event.
 * methodCalled: method that presenters that handle this event need to define. This method will have only one parameter which class is the one defined in the `eventObjectClass` attribute.
 * eventObjectClass: class of the object that is sent with the event.
 * handlers: name(s) of the presenter(s) that handle this event. The name(s) of the presenters(s) must be equal to one of the presenters' name declared in the configuration file. Each presenter name must be separated by a coma. Each presenter must implement the handler method called when this type of event is thrown. For example, handlers of `event1` event must implement the following method:
{{{
public void onEvent1(com.mvp4g.example.client.bean.Bean1 bean)
}}}

===Start (optional)===
You can decide to throw an event and to add a view in the RootPanel when you start your application.
{{{
<start view="rootView" eventType="start" />
}}}
 * view (optional): view to add to the RootPanel when the application starts. 
 * eventType (optional): event type sent to the event bus when the application starts. No object will be sent with the event.

It is similar to execute the following lines of code:
{{{
eventBus.dispatch("start");
RootPanel.add(rootView);
}}}

===Full example===
{{{
<?xml version="1.0" encoding="ISO-8859-1" ?>
<mvp4g>
	<views package="com.mvp4g.example.client.view" >
		<view name="rootView" class="RootView" />
		<view name="userCreateView" class="UserCreateView" />
		<view name="userDisplayView" class="UserDisplayView"/>
	</views>
	<services package="com.mvp4g.example.client.service" >
		<service name="userService" class="UserService" />
	</services>
	<presenters package="com.mvp4g.example.client.presenter" >
		<presenter name="rootPresenter" class="RootPresenter" view="rootView" />
		<presenter name="createUserPresenter" class="UserCreatePresenter" view="userCreateView" services="userService" />
		<presenter name="displayUserPresenter" class="UserDisplayPresenter" view="userDisplayView" />						
	</presenters>
	<events>
		<event type="userCreated" calledMethod="onUserCreated" eventObjectClass="com.mvp4g.example.client.bean.UserBean" handlers="displayUserPresenter" />			
		<event type="changeBody" calledMethod="onChangeBody" handlers="rootPresenter" eventObjectClass="com.google.gwt.user.client.ui.Widget"/>
		<event type="displayMessage" calledMethod="onDisplayMessage" handlers="rootPresenter" eventObjectClass="java.lang.String" />
		<event type="start" calledMethod="onStart" handlers="rootPresenter, createUserPresenter" />
	</events>
	
	<start view="rootView" eventType="start" />
	
</mvp4g>		
}}}