#summary How Mvp4g works

= Introduction =

== Architecture Overview ==

[architecture.png]

As we can see on this diagram, each UI knows only two other objects:
 * the event bus
 * the RPC services (not mandatory)

== Sequence diagram ==

[diagram_sequency.png]

As we can on this sequence diagram:
 * Events are sent by presenters to the event bus. 
 * The event bus dispatches the events to other presenters that handle the sent event.


== Configuration of the framework ==

The way the event bus dispatches events can be easily configured thanks to a xml file as shown below.

{{{
<mvp4g>
	<presenters>
		<presenter name="rootPresenter" class="com.mvc4g.example.client.presenter.RootPresenter" />
		<presenter name="createUserPresenter" class="com.mvc4g.example.client.presenter.UserCreatePresenter" />
		<presenter name="displayUserPresenter" class="com.mvc4g.example.client.presenter.UserDisplayPresenter" />
	</presenters>
	<events>
		<event type="createUser" functionCalled="onCreateUser" handlers="displayUserPresenter" />
		<event type="changeBody" functionCalled="onChangeBody" handlers="rootPresenter" />
		<event type="displayMessage" functionCalled="onDisplayMessage" handlers="rootPresenter" />
		<event type="start" functionCalled="onStart" handlers="rootPresenter, createUserPresenter" />
	</events>

	<start eventType="start" />
</mvp4g>
}}}




= Event =
Events are created by presenters and send to event bus that dispatch it to other presenters that can handle them. Events contain two pieces of information:
    * Type of the event
    * Object linked with this event 

{{{
UserBean user = new UserBean();
user.setName("John Smith");
new Event("CreateUser", user);
}}}

Each event that can be sent by presenters need to be declared inside the mvp4g configuration file:
{{{
<event type="createUser" functionCalled="onCreateUser" handlers="displayUserPresenter,listUserPresenter" />
}}}
For this tag, you find the following attributes:
 * type: type of the event
 * functionCalled: this is the function that the event bus will call to dispatch the event to the handlers. Presenters that handle this type of event must implement a function with this name that one Object parameter. For this example, handlers of the event need to implement the following function:
{{{
public void onCreateUser(Object form))
}}}
 * handlers: name of the presenters that handles this event. Each presenter name must be separate by a coma.
