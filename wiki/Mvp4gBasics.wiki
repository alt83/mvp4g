#summary How Mvp4g works

= Introduction =

== Architecture Overview ==

[architecture.png]

As we can see on this diagram, each UI knows only two other objects:
 * the event bus
 * the RPC services (not mandatory)

== Sequence diagram ==

[diagram_sequency.png]

As we can on this sequence diagram:
 * Events are sent by presenters to the event bus. 
 * The event bus dispatches the events to other presenters that handle the sent event.


== Configuration of the framework ==

The way the event bus dispatches events can be easily configured thanks to a xml file as shown below.

{{{
<mvp4g>
	<presenters>
		<presenter name="rootPresenter" class="com.mvc4g.example.client.presenter.RootPresenter" />
		<presenter name="createUserPresenter" class="com.mvc4g.example.client.presenter.UserCreatePresenter" />
		<presenter name="displayUserPresenter" class="com.mvc4g.example.client.presenter.UserDisplayPresenter" />
	</presenters>
	<events>
		<event type="createUser" functionCalled="onCreateUser" handlers="displayUserPresenter" />
		<event type="changeBody" functionCalled="onChangeBody" handlers="rootPresenter" />
		<event type="displayMessage" functionCalled="onDisplayMessage" handlers="rootPresenter" />
		<event type="start" functionCalled="onStart" handlers="rootPresenter, createUserPresenter" />
	</events>

	<start eventType="start" />
</mvp4g>
}}}


= Presenter =
Presenters correspond to the presenter of the MVP pattern. The Mvp4g framework doesn't force you to implement this pattern even if it's strongly suggested.

Presenters can sent events to the event bus and handle events from it.

To create a presenter, you need to:
 * implement the interface com.mvp4g.client.Presenter or extend the class com.mvp4g.client.Presenter
 * have a default constructor with no argument


Each presenter need to be declared inside the Mvp4g configuration file:
{{{
<presenter name="createUserPresenter" class="com.mvc4g.example.client.presenter.UserCreatePresenter" />
}}}

= Event =
Events are created by presenters and send to event bus that dispatch it to other presenters that can handle them. Events contain two pieces of information:
    * Type of the event
    * Object linked with this event 

{{{
UserBean user = new UserBean();
user.setName("John Smith");
new Event("CreateUser", user);
}}}

Each event that can be sent by presenters need to be declared inside the Mvp4g configuration file:
{{{
<event type="createUser" functionCalled="onCreateUser" handlers="displayUserPresenter,listUserPresenter" />
}}}
For this tag, you find the following attributes:
 * type: type of the event
 * functionCalled: this is the function that the event bus will call to dispatch the event to the handlers. Presenters that handle this type of event must implement a function with this name that one Object parameter. For this example, handlers of the event need to implement the following function:
{{{
public void onCreateUser(Object form))
}}}
 * handlers: name of the presenters that handles this event. Each presenter name must be separate by a coma.


= Event Bus=
The event bus is in charged of dispatching events to the presenters that handles them. This dispatch is done thanks to the configuration file.

With the following line in the Mvpg4 configuration file:
{{{
<event type="createUser" functionCalled="onCreateUser" handlers="displayUserPresenter,listUserPresenter" />
}}}

When the following event is sent:
{{{
new Event("CreateUser", newUser)
}}}
The following code is executed:
{{{
displayUserPresenter.onCreateUser(newUser);
listUserPresenter.onCreateUser(newUser);
}}}