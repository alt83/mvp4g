#summary Mvp4g faq

If you have other questions about the framework or would like further information about a question, just let me know by leaving a message on the FAQ discusion in the Mvp4g Google group (http://groups.google.com/group/mvp4g/browse_thread/thread/d8ee207598bf02fa).


====What's the class diagram of the framework?====
http://mvp4g.googlecode.com/svn/tags/mvp4g-1.0.0/documentation/uml/mvp4g_class_diagram_overview.png

====What's a presenter?====
In a MVP architecture, the presenter is in charge of the logic of the application. It acts upon the model and the view.<br/>
In the Mvp4g framework, a presenter is an object that implements the PresenterInterface and that is defined inside a `presenter` tag in the configuration. 

====What's a view?====
In the MVP architecture, a view is an interface that displays the data and routes user commands to the presenter to act upon that data.<br/>
In the Mvp4g framework, a view is an object defined inside a `view` tag in the configuration file. It doesn't need to implement any interface. The developer is free to use any widgets library he wants.

====What's a service?====
In the Mvp4g framework, a service is an interface that extends the RemoveService (in order to define a RPC interface) and that is defined inside a `service` tag in the configuration file.

====What's an event bus and how can it dispatch events?====
The event bus is a Java object, part of the Mvp4g library in charge of dispatching events between the presenters.<br/>
The event bus dispatches events the following way thanks to information stored in the configuration file:<br/>
http://mvp4g.googlecode.com/svn/tags/mvp4g-1.0.0/documentation/uml/mvp4g_event_broadcast.png

====How are presenters, views, services and history converters' class name built? How is the package attribute used?====
The following rules are applied to build the class name:
 * the class attribute doesn't contain any "." or starts with a ".", then the class name is equals to package attribute + class attribute.
 * the class attribute starts contains "." but doesn't start by ".", then the class name is equals to class attribute.

For example:
{{{
<views package="com.mvp4g.example.client.view" >
	<view name="rootView" class="com.mvp4g.example.client.RootView" />
	<view name="userCreateView" class="UserCreateView" />
	<view name="userDisplayView" class=".display.UserDisplayView"/>
</views>
}}}

will generate the following class names: com.mvp4g.example.client.RootView, com.mvp4g.example.client.UserCreateView and com.mvp4g.example.client.display.UserDisplayView.



====When and how are presenters, views and services instantiated? When and how views and services injected into presenters? When is the event bust created and configured?====
All these actions are done thanks to the following lines:
{{{
Mvp4gStarter starter = GWT.create(Mvp4gStarter.class);
starter.start();
}}}

The first line creates a Java class thanks to the configuration file and a Generator.<br/>
For example, with the following configuration file:
{{{
<?xml version="1.0" encoding="ISO-8859-1" ?>
<mvp4g>
	<views package="com.mvp4g.example.client.view" >
		<view name="rootView" class="RootView" />
		<view name="userCreateView" class="UserCreateView" />
		<view name="userDisplayView" class="UserDisplayView"/>
	</views>
	<services package="com.mvp4g.example.client.service" >
		<service name="userService" class="UserService" />
	</services>
	<presenters package="com.mvp4g.example.client.presenter" >
		<presenter name="rootPresenter" class="RootPresenter" view="rootView" />
		<presenter name="createUserPresenter" class="UserCreatePresenter" view="userCreateView" services="userService" />
		<presenter name="displayUserPresenter" class="UserDisplayPresenter" view="userDisplayView" />						
	</presenters>
	<events>
		<event type="userCreated" calledMethod="onUserCreated" eventObjectClass="com.mvp4g.example.client.bean.UserBean" handlers="displayUserPresenter" />			
		<event type="changeBody" calledMethod="onChangeBody" handlers="rootPresenter" eventObjectClass="com.google.gwt.user.client.ui.Widget"/>
		<event type="displayMessage" calledMethod="onDisplayMessage" handlers="rootPresenter" eventObjectClass="java.lang.String" />
		<event type="start" calledMethod="onStart" handlers="rootPresenter, createUserPresenter" />
	</events>
	
	<start view="rootView" eventType="start" />
	
</mvp4g>
}}}

the following Java file is generated:
{{{
package com.mvp4g.client;

import com.google.gwt.user.client.ui.RootPanel;
import com.mvp4g.client.event.EventBus;
import com.google.gwt.core.client.GWT;
import com.mvp4g.client.event.Command;

public class Mvp4gStarterImpl implements Mvp4gStarter {
    public void start(){
      EventBus eventBus = new EventBus();
      final com.mvp4g.example.client.view.UserDisplayView userDisplayView = new com.mvp4g.example.client.view.UserDisplayView();
      final com.mvp4g.example.client.view.UserCreateView userCreateView = new com.mvp4g.example.client.view.UserCreateView();
      final com.mvp4g.example.client.view.RootView rootView = new com.mvp4g.example.client.view.RootView();
      final com.mvp4g.example.client.service.UserServiceAsync userService = GWT.create(com.mvp4g.example.client.service.UserService.class);
      final com.mvp4g.example.client.presenter.UserCreatePresenter createUserPresenter = new com.mvp4g.example.client.presenter.UserCreatePresenter();
      createUserPresenter.setEventBus(eventBus);
      createUserPresenter.setView(userCreateView);
      createUserPresenter.setUserService(userService);
      final com.mvp4g.example.client.presenter.RootPresenter rootPresenter = new com.mvp4g.example.client.presenter.RootPresenter();
      rootPresenter.setEventBus(eventBus);
      rootPresenter.setView(rootView);
      final com.mvp4g.example.client.presenter.UserDisplayPresenter displayUserPresenter = new com.mvp4g.example.client.presenter.UserDisplayPresenter();
      displayUserPresenter.setEventBus(eventBus);
      displayUserPresenter.setView(userDisplayView);
      Command cmdstart = new Command<java.lang.Object>(){
        public void execute(java.lang.Object form) {
          rootPresenter.onStart();
          createUserPresenter.onStart();
        }
      };
      eventBus.addEvent("start", cmdstart);
      Command cmdchangeBody = new Command<com.google.gwt.user.client.ui.Widget>(){
        public void execute(com.google.gwt.user.client.ui.Widget form) {
          rootPresenter.onChangeBody(form);
        }
      };
      eventBus.addEvent("changeBody", cmdchangeBody);
      Command cmddisplayMessage = new Command<java.lang.String>(){
        public void execute(java.lang.String form) {
          rootPresenter.onDisplayMessage(form);
        }
      };
      eventBus.addEvent("displayMessage", cmddisplayMessage);
      Command cmduserCreated = new Command<com.mvp4g.example.client.bean.UserBean>(){
        public void execute(com.mvp4g.example.client.bean.UserBean form) {
          displayUserPresenter.onUserCreated(form);
        }
      };
      eventBus.addEvent("userCreated", cmduserCreated);
      RootPanel.get().add(rootView);
      eventBus.dispatch("start");
    };
  }
}}}
As you can see, it's the call to the start method that:
 * creates one instance for each view, service and presenter.
 * injects views, services and event bus in the presenters.
 * creates the event bus and a command for each event. These commands are then added to the event bus.