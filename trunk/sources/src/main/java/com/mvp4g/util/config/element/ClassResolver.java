package com.mvp4g.util.config.element;

/**
 * A class responsible for generating a fully qualified Java class name.
 * <p/>
 * 
 * The general rules for resolving a class name are as follows:
 * 
 * <ol>
 * <li/>the package attribute on the parent tag is optional, but the class attribute on the child
 * element is required.
 * <li/>a package name can be specified on the parent tag of one or more elements specifying a
 * simple class name; the fully qualified class name is generated by joining the package name with
 * the class name.
 * 
 * <pre>
 *       Example: given
 *       
 *       		 &lt;presenters package=&quot;com.wombat.foo&quot;&gt;
 *       			&lt;presenter class=&quot;MyClass&quot; /&gt;
 *       			&lt;presenter class=&quot;YourClass&quot; /&gt;
 *       		 &lt;/presenters&gt;
 *       
 *       the generated class names will be &quot;com.wombat.foo.MyClass&quot; and &quot;com.wombat.foo.YourClass&quot;.
 * </pre>
 * 
 * <li/>The class attribute can also define part of the class name (ie include subpackages) by
 * starting the class attribute value by '.'. In this case, the fully qualified class name is
 * generated by joining the package name with the class name.
 * 
 * <pre>
 *       Example: given
 *       
 *       		 &lt;presenters package=&quot;com.wombat.foo&quot;&gt;
 *       			&lt;presenter class=&quot;.mysubpackage.MyClass&quot; /&gt;
 *       			&lt;presenter class=&quot;YourClass&quot; /&gt;
 *       		 &lt;/presenters&gt;
 *       
 *       the generated class names will be &quot;com.wombat.foo.mysubpackage.MyClass&quot;.
 * </pre>
 * 
 * <li/>a fully qualified class name specified on a given element takes precedence over the
 * configured "package" attribute specified on the element's parent tag.
 * <p/>
 * 
 * <pre>
 *       Example: given
 *       
 *       		 &lt;presenters package=&quot;com.wombat.foo&quot;&gt;
 *       			&lt;presenter class=&quot;com.boohoo.MyClass&quot; /&gt;
 *       		 &lt;/presenters&gt;
 *       
 *       the generated class name will be &quot;com.boohoo.MyClass&quot;.
 * </pre>
 * 
 * </ol>
 * 
 * @author javier
 * 
 */
class ClassResolver {

	String getClassNameFrom( String packageName, String className ) {

		checkValidityOfClass( className );

		if ( className.startsWith( "." ) ) {
			checkValidityOfPackage( packageName, className );
			return packageName + className;
		} else if ( !className.contains( "." ) ) {
			checkValidityOfPackage( packageName, className );
			return packageName + "." + className;
		}

		return className;
	}

	private void checkValidityOfClass( String className ) {
		if ( className == null || className.trim().length() == 0 ) {
			throw new IllegalArgumentException( "Class name cannot be null." );
		}
	}

	private void checkValidityOfPackage( String packageName, String className ) {
		if ( packageName == null || packageName.trim().length() == 0 ) {
			throw new IllegalArgumentException( "No package has been specified for class '" + className + "'" );
		}
	}
}
